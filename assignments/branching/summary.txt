# Branching

# Dewi Fortuna

What is Git Branching?
Git branching is a technique in which developers create separate lines of development, known as branches, to work on specific features, fixes, or experiments independently from the main codebase. This allows multiple parallel streams of work to coexist without interfering with each other.

Main Branches:

Master/Main Branch: The primary branch in a Git repository, often referred to as "master" or "main," contains the production-ready code.
Feature Branch: Developers create feature branches to work on new features or enhancements. These branches are typically based on the main branch.
Creating Branches:

To create a new branch, you can use the "git branch" command followed by the branch name or "git checkout -b" to create and switch to a new branch in one step.
Branch names should be descriptive and related to the task or feature you're working on.
Switching Between Branches:

Developers can switch between branches using the "git checkout" command, allowing them to transition their working environment to a different branch.
Committing Changes:

Each branch maintains its own set of commits, allowing developers to make changes and commit them independently from other branches.
Changes made on a branch are isolated until they are merged back into the main branch.
Merging Branches:

To integrate changes from one branch into another, developers use the "git merge" command. This combines the commits from the source branch into the target branch.
Merge conflicts can occur when changes in the source branch conflict with those in the target branch, and these conflicts must be resolved manually.
Pull Requests (GitHub, GitLab, Bitbucket):

Online Git platforms like GitHub, GitLab, and Bitbucket facilitate collaborative development by introducing the concept of pull requests. Developers propose changes by creating a pull request, which can be reviewed, discussed, and merged into the main branch.
Branch Management Best Practices:

Regularly update your feature branches with changes from the main branch to avoid conflicts.
Delete feature branches after they have been merged to keep the repository clean.
Use branching strategies like Gitflow or GitHub Flow for structured development workflows.
Benefits of Git Branching:

Isolation: Branches allow multiple developers to work on different features simultaneously without interfering with each other's work.
Experimentation: Developers can create branches for experimental changes or bug fixes, ensuring the main branch remains stable.
Collaboration: Branches support collaborative development and code review processes through pull requests.
In summary, Git branching is a powerful and essential aspect of version control that enables teams to manage and collaborate on software development projects efficiently. It promotes parallel development, isolation of changes, and the ability to experiment without impacting the stability of the main codebase.
